header {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  width: 100%;
  z-index: 100;
  padding: 5px 10px 0 10px;
  display: flex;
  justify-content: flex-end;
  align-items: center;
  color: white;
}

.title-overlay-container {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 80px;
  display: flex;
  justify-content: center;
  z-index: 100;
  pointer-events: none;
  background: linear-gradient(
    rgb(2, 0, 36),
    rgba(2, 0, 36, 0.3) 30%,
    rgba(0, 0, 0, 0) 75%
  );
  padding: 0 10vw;
  padding-top: 5px;
}

.title-overlay-container p {
  font-size: 2rem;
  background: -webkit-linear-gradient(45deg, #241ad8, #11a568 80%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  font-family: Lobster Two;
  font-weight: bolder;
  filter: drop-shadow(0 0 4px black);
}

.game-container {
  position: relative;
  height: 100%;
  width: 100%;
}

.background-container {
  height: 100%;
  width: 100%;
  position: absolute;
}

.background-base {
  height: 100%;
  width: 100%;
  background: radial-gradient(
    circle,
    rgba(2, 0, 36, 1) 0%,
    rgba(255, 255, 255, 1) 0%,
    rgba(214, 207, 255, 1) 17%,
    rgb(4 106 194) 22%,
    rgb(52 77 172) 59%,
    rgba(30, 30, 30, 1) 70%
  );
  filter: blur(150px);
  position: absolute;
}

.grid-lines {
  --s: 100px; /* control the size of the grid */
  --n: 4; /* control the granularity */
  --t: 2px; /* the thickness */
  --g: 0px; /* the gap between dashes */

  --c: #ffffff 25%, #0000 0;
  background: conic-gradient(at var(--g) var(--t), var(--c))
      calc((var(--s) / var(--n) - var(--g) + var(--t)) / 2) 0 /
      calc(var(--s) / var(--n)) var(--s),
    conic-gradient(from 180deg at var(--t) var(--g), var(--c)) 0
      calc((var(--s) / var(--n) - var(--g) + var(--t)) / 2) / var(--s)
      calc(var(--s) / var(--n));
  /* you probably don't need to set any size in your case */
  /* width: calc(round(down, 100%, var(--s)) + var(--t));
  height: calc(4 * var(--s) + var(--t)); */
  width: 100%;
  height: 100%;
  position: absolute;
  background-position: -2px -2px;
  box-shadow: 0 0 500px 150px black inset;
}
@supports not (opacity: round(1, 1)) {
  .grid-lines {
    width: 100%;
  }
}

.clue-container {
  height: 100%;
  width: 100%;
  display: flex;
}

/* Overring default from swiper */
.swiper-button-prev,
.swiper-button-next {
  color: white !important;
}

/* Overriding builtins from react-pinch-pan-zoom library to allow full screen even when image isn't */
.react-transform-wrapper,
.react-transform-component {
  height: 100% !important;
  width: 100% !important;
}

.image-clue {
  height: 100%;
  width: 100%;
  object-fit: contain;
  filter: drop-shadow(0px 0px 10px rgba(0, 0, 0, 0.75));
}

.map-container {
  position: absolute;
  width: 225px;
  height: 200px;
  bottom: 20px;
  right: 20px;
  overflow: hidden;
  z-index: 100;
  filter: drop-shadow(0px 0px 3px black);
}

.map-container--active {
  /* Change this so we can animate it. */
  right: 10px;
  left: 10px;
  width: auto;
  height: 300px;
  bottom: 10px;
}

/* https://stackoverflow.com/questions/40365440/react-leaflet-map-not-correctly-displayed */
.leaflet-container {
  height: 100vh;
}

.embed-container {
  width: 100%;
  height: 100%;
}

.drag-handle {
  z-index: 400;
  position: absolute;
  top: -5px;
  right: 0;
  padding: 0 3px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 25px;
  /* The following is mimicking the leaflet map embed control style */
  color: black;
  background: white;
  border: 2px solid rgba(0, 0, 0, 0.2);
  cursor: grab;
}

.btn--submit {
  position: absolute;
  bottom: 5px;
  right: 5px;
  background: purple;
  color: white;
  padding: 5px 10px;
  /* Needs to sit over leaflet UI elements. */
  z-index: 1000;
}

.btn--submit:disabled {
  background: grey;
}

.score--0 {
  --primary-color-guess: var(--score-primary-0);
}

.score--1 {
  --primary-color-guess: var(--score-primary-1);
}

.score--2 {
  --primary-color-guess: var(--score-primary-2);
}

.score--3 {
  --primary-color-guess: var(--score-primary-3);
}

.score--4 {
  --primary-color-guess: var(--score-primary-4);
}

.score--5 {
  --primary-color-guess: var(--score-primary-5);
}

.scores-container {
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 999;
}

.scores-container ul {
  display: flex;
  justify-content: flex-start;
  flex-wrap: nowrap;
}

.score {
  background: var(--primary-color-guess);
  position: relative;
  border-radius: 10px;
  box-shadow: 0 8px 15px -8px black;
}

.scores-container .score {
  outline: 1px solid white;
  height: 10px;
  min-width: calc(100% / 6);
  opacity: 0.7;
}

.marker-container svg {
  /* https://stackoverflow.com/questions/66743891/why-a-click-on-svg-element-is-not-captured-by-node-contains-method */
  pointer-events: none;
}

.marker-container .marker-inner {
  fill: var(--primary-color-guess);
}

.results-container {
  position: absolute;
  top: 10%;
  left: 10%;
  height: 80%;
  width: 80%;
  background: rgba(68, 175, 196, 0.95);
  color: whtie;
  z-index: 100;
  text-align: center;
  border-radius: 10px;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.results__nav {
  height: 30px;
  display: flex;
  flex-wrap: nowrap;
  justify-content: flex-end;
  align-items: center;
  flex-shrink: 0;
}

.results__nav button.btn--close {
  position: absolute;
  right: -10px;
  top: -10px;
  height: 35px;
  width: 35px;
  font-size: 20px;
  font-weight: bolder;
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 50%;
  background: rgba(36, 93, 105);
  color: white;
  cursor: pointer;
}

/* HTML: <div class="ribbon">Your text content</div>  https://css-generators.com/ribbon-shapes/ */

.results__location {
  font-family: "Lobster", sans-serif;
  font-weight: 400;
  font-style: normal;
  font-size: 2rem;
  position: absolute;
  top: -20px;
  left: 50%;
  transform: translate(-50%, 0);
  width: inherit;
}

.results__location span {
  font-size: 0.6em;
}

.ribbon {
  background: #1f8fcf;
  padding: 5px 0;
  box-shadow: 0 7px 7px -5px #15788c;
  border-radius: 2px;
}

.results__main {
  padding: 20px;
  flex: 1 0;
  justify-content: flex-start;
  align-items: center;
  display: flex;
  flex-direction: column;
}

.results__game-title {
  font-size: 25px;
}

.results__chart {
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
  flex: 1 0;
}

.score-container {
  width: 25%;
  min-width: 25%;
  margin: 0 20px;
  flex-grow: 0;
  flex-shrink: 0;
}

.score-container .score {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 22px;
  height: 60px;
  padding: 0 15px;
  color: black;
}

.score__count {
  position: absolute;
  right: -15px;
  width: 30px;
  height: 30px;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  border: 1px solid rgba(0, 0, 0, 0.1);
  background: rgb(98, 206, 228);
  color: rgb(33, 33, 33);
  box-shadow: 0 5px 15px -5px black;
}

@media screen and (min-height: 500px) {
  .results__main {
    padding-top: 10px;
  }

  .results__chart {
    display: block;
  }

  .score-container {
    width: 50%;
    max-width: 250px;
    margin: 10px auto;
  }

  .score-container .score {
    height: 50px;
  }
}

@media screen and (min-height: 700px) {
  .results__main {
    padding-top: 50px;
  }
}

@media screen and (min-width: 500px) {
  .ribbon {
    --s: 1.8em; /* the ribbon size */
    --d: 0.8em; /* the depth */
    --c: 0.8em; /* the cutout part */

    box-shadow: none;
    padding: 0 calc(var(--s) + 0.5em) var(--d);
    line-height: 1.5;
    background: conic-gradient(
          at left var(--s) bottom var(--d),
          #0000 25%,
          #0008 0 37.5%,
          #0004 0
        )
        0 /50% 100% no-repeat,
      conic-gradient(
          at right var(--s) bottom var(--d),
          #0004 62.5%,
          #0008 0 75%,
          #0000 0
        )
        100%/50% 100% no-repeat;
    clip-path: polygon(
      0 var(--d),
      var(--s) var(--d),
      var(--s) 0,
      calc(100% - var(--s)) 0,
      calc(100% - var(--s)) var(--d),
      100% var(--d),
      calc(100% - var(--c)) calc(50% + var(--d) / 2),
      100% 100%,
      calc(100% - var(--s) - var(--d)) 100%,
      calc(100% - var(--s) - var(--d)) calc(100% - var(--d)),
      calc(var(--s) + var(--d)) calc(100% - var(--d)),
      calc(var(--s) + var(--d)) 100%,
      0 100%,
      var(--c) calc(50% + var(--d) / 2)
    );
    background-color: #1f8fcf; /* the main color */
  }
}

.guess-distance span {
  font-size: 0.75em;
}

.results__timer-container {
  margin-top: auto;
}
