header {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  width: 100%;
  z-index: 100;
  padding: 5px 10px 0 10px;
  display: flex;
  justify-content: flex-end;
  align-items: center;
  color: white;
}

.game-container {
  position: relative;
  height: 100%;
  width: 100%;
}

.background-container {
  height: 100%;
  width: 100%;
  position: absolute;
}

.background-base {
  height: 100%;
  width: 100%;
  background: radial-gradient(
    circle,
    rgba(2, 0, 36, 1) 0%,
    rgba(255, 255, 255, 1) 0%,
    rgba(214, 207, 255, 1) 17%,
    rgb(4 106 194) 22%,
    rgb(52 77 172) 59%,
    rgba(30, 30, 30, 1) 70%
  );
  filter: blur(150px);
  position: absolute;
}

.grid-lines {
  --s: 100px; /* control the size of the grid */
  --n: 4; /* control the granularity */
  --t: 2px; /* the thickness */
  --g: 0px; /* the gap between dashes */

  --c: #ffffff 25%, #0000 0;
  background: conic-gradient(at var(--g) var(--t), var(--c))
      calc((var(--s) / var(--n) - var(--g) + var(--t)) / 2) 0 /
      calc(var(--s) / var(--n)) var(--s),
    conic-gradient(from 180deg at var(--t) var(--g), var(--c)) 0
      calc((var(--s) / var(--n) - var(--g) + var(--t)) / 2) / var(--s)
      calc(var(--s) / var(--n));
  /* you probably don't need to set any size in your case */
  /* width: calc(round(down, 100%, var(--s)) + var(--t));
  height: calc(4 * var(--s) + var(--t)); */
  width: 100%;
  height: 100%;
  position: absolute;
  background-position: -2px -2px;
  box-shadow: 0 0 500px 200px black inset;
}
@supports not (opacity: round(1, 1)) {
  .grid-lines {
    width: 100%;
  }
}

.clue-container {
  height: 100%;
  width: 100%;
  display: flex;
}

/* Overring default from swiper */
.swiper-button-prev,
.swiper-button-next {
  color: white !important;
}

/* Overriding builtins from react-pinch-pan-zoom library to allow full screen even when image isn't */
.react-transform-wrapper,
.react-transform-component {
  height: 100% !important;
  width: 100% !important;
}

.image-clue {
  height: 100%;
  width: 100%;
  object-fit: contain;
  filter: drop-shadow(0px 0px 10px rgba(0, 0, 0, 0.75));
}

.map-container {
  position: absolute;
  width: 225px;
  height: 200px;
  bottom: 20px;
  right: 20px;
  overflow: hidden;
  z-index: 100;
  filter: drop-shadow(0px 0px 3px black);
}

.map-container--active {
  /* Change this so we can animate it. */
  right: 10px;
  left: 10px;
  width: auto;
  height: 300px;
  bottom: 10px;
}

/* https://stackoverflow.com/questions/40365440/react-leaflet-map-not-correctly-displayed */
.leaflet-container {
  height: 100vh;
}

.embed-container {
  width: 100%;
  height: 100%;
}

.drag-handle {
  z-index: 400;
  position: absolute;
  top: -5px;
  right: 0;
  padding: 0 3px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 25px;
  /* The following is mimicking the leaflet map embed control style */
  color: black;
  background: white;
  border: 2px solid rgba(0, 0, 0, 0.2);
  cursor: grab;
}

.btn--submit {
  position: absolute;
  bottom: 5px;
  right: 5px;
  background: purple;
  color: white;
  padding: 5px 10px;
  /* Needs to sit over leaflet UI elements. */
  z-index: 1000;
}

.btn--submit:disabled {
  background: grey;
}

.score--0 {
  --primary-color-guess: red;
}

.score--1 {
  --primary-color-guess: orange;
}

.score--2 {
  --primary-color-guess: yellow;
}

.score--3 {
  --primary-color-guess: chartreuse;
}

.score--4 {
  --primary-color-guess: green;
}

.score--5 {
  --primary-color-guess: rgb(136, 0, 177);
}

.scores-container {
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 999;
}

.scores-container ul {
  display: flex;
  justify-content: flex-start;
  flex-wrap: nowrap;
}

.score {
  background: var(--primary-color-guess);
}

.scores-container .score {
  outline: 1px solid white;
  height: 10px;
  min-width: calc(100% / 6);
  opacity: 0.7;
}

.marker-container svg {
  /* https://stackoverflow.com/questions/66743891/why-a-click-on-svg-element-is-not-captured-by-node-contains-method */
  pointer-events: none;
}

.marker-container .marker-inner {
  fill: var(--primary-color-guess);
}

.results-container {
  position: absolute;
  top: 10%;
  left: 10%;
  height: 80%;
  width: 80%;
  background: rgba(79, 79, 79, 0.829);
  z-index: 100;
  text-align: center;
}

.results__nav {
  height: 30px;
  display: flex;
  flex-wrap: nowrap;
  justify-content: flex-end;
  align-items: center;
}

.results__nav button.btn--close {
  padding: 5px;
  margin-right: 10px;
  border: 1px solid purple;
  cursor: pointer;
}

.results__main {
  padding: 20px;
}

.results-container h1 {
  font-size: 2rem;
}

.results__chart {
}

.results__chart .score {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 22px;
  height: 50px;
  max-width: 250px;
  margin: 5px auto;
  padding: 0 15px;
  color: black;
}

.guess-distance span {
  font-size: 0.75em;
}
